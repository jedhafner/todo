/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/DOM.js":
/*!********************!*\
  !*** ./src/DOM.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"./src/index.js\");\n\n\nconsole.log(_index__WEBPACK_IMPORTED_MODULE_0__.projectList);\nconsole.log(_index__WEBPACK_IMPORTED_MODULE_0__.taskList);\n\n//function for creating simple DOM elements\nfunction elementCreator (elementId, tag, parent, elementText, elementClass) {\n  const element = document.createElement(tag);\n  parent.appendChild(element);\n  if (elementText){element.textContent = elementText};\n  if (elementClass){element.classList.add(elementClass)};\n  if (elementId){element.id = elementId};\n};\n\n//removes child nodes\nfunction removeAllChildNodes(parent) {\n  while (parent.firstChild) {\n      parent.removeChild(parent.firstChild);\n  }\n}\n//function that will remove task or project from DOM and associated array.\nfunction removeElement (element, array, storage) {\n  let parent = element.parentNode;\n  let parentId = parent.id;\n  console.log(parentId);\n  if (confirm(`Do you really want to delete this? It can't be undone.`)) {\n     array.forEach(function(element){\n       if (element.name === parentId){\n         array.splice(array.indexOf(element), 1);\n       }\n     });\n     console.log(array);\n      localStorage.setItem(storage, JSON.stringify(array));\n      parent.remove();\n      if (array == _index__WEBPACK_IMPORTED_MODULE_0__.projectList) {\n        //delete all associated tasks in DOM\n        let classToRemove = String(parent.replace(/\\s/g, '').toLowerCase());\n        console.log(classToRemove);\n        Array.from(allTasks).forEach(function(element){\n          console.log(element.classList[0]);\n          if (element.classList[0] === classToRemove) {\n            element.remove();\n          }\n        });\n        for (let i = 0; i < _index__WEBPACK_IMPORTED_MODULE_0__.taskList.length; i++){\n          if (_index__WEBPACK_IMPORTED_MODULE_0__.taskList[i].project === parent){\n            let newArray = _index__WEBPACK_IMPORTED_MODULE_0__.taskList.splice(i,1);\n            localStorage.setItem('taskList', JSON.stringify(_index__WEBPACK_IMPORTED_MODULE_0__.taskList));\n          }\n        }\n      }\n    } else {\n      return;\n    }\n};\n\n// marks task Complete/Incomplete\nfunction completeTask (element, array, storage){\n  let parent = element.parentNode;\n  console.log(`element: ${element.textContent}`);\n  let parentId = parent.id;\n  console.log(parentId);\n  let value;\n  if (element.textContent === 'complete'){\n    value = 'incomplete';\n  } else { value = 'complete'};\n    array.forEach(function(element){\n      if (element.name === parentId){\n        element.status = value;\n      }\n      //change colors\n    });\n    localStorage.setItem(storage, JSON.stringify(array));\n    element.textContent = value;\n    };\n//function to edit task or project in DOM and associated array;\n\n\n//function to create dropdown menu\nfunction createDropDown (category, options, parent){\n  let label = document.createElement('label')\n  label.setAttribute('for', category)\n  label.textContent = category;\n  \n  let select = document.createElement('select')\n  select.setAttribute('name','project')\n  select.id = 'project';\n  \n  for (let i = 0; i<options.length; i++){\n    let option = document.createElement('option')\n    option.setAttribute('value',options[i])\n    option.textContent = options[i];\n    select.appendChild(option);\n  }\n\n  parent.appendChild(label);\n  parent.appendChild(select);\n};\n\n// Let there be a minimal HTML framework! This gives me\n//an element onto which I can append DOM elements. I get\n//the impressions that if I really understood the DOM, I\n//would not need this. #onetogrowon\nconst body = document.getElementsByTagName('body')[0];\nbody.style.display = 'flex';\n\nelementCreator('navbar','div', body);\nelementCreator('addToProjectList','button',navbar,'Add project');\nelementCreator('addToTaskList','button',navbar, 'Add task');\nelementCreator('content','div',body,'','content');\nelementCreator('projectDisplay','div',content,'','projectDisplay');\nelementCreator('taskDisplay','div',content,'','taskDisplay');\n\n//create project and task forms in DOM\n\nelementCreator('projectForm','form', body,'','hidden');\nlet projectForm = document.getElementById('projectForm');\n\nelementCreator('taskForm','form', body,'','hidden');\nlet taskForm = document.getElementById('taskForm');\n\nelementCreator('editTask','form', body,'','hidden');\nlet editTask = document.getElementById('editTask');\n\n//creates form to accept project input\nfunction newProjectForm(fields){\n  elementCreator('submit','button', projectForm, 'Save')\n  let submit = document.getElementById('submit');\n    submit.setAttribute('type','submit');\n\n  elementCreator('Cancel', 'p', projectForm, 'Cancel','cancel');\n  createDropDown('priority',_index__WEBPACK_IMPORTED_MODULE_0__.priorities, projectForm);\n  \n  for (let i = 0; i<fields.length; i++) {\n        let label = document.createElement('label');\n        label.setAttribute('for',fields[i]);\n        label.textContent = fields[i];\n        projectForm.appendChild(label);\n        let input = document.createElement('input');\n        //input.value = 'Example Value';\n        input.setAttribute('type', 'text');\n        input.setAttribute('name', fields[i]);\n        input.required = true;\n        projectForm.appendChild(input);\n    }    \n}\nnewProjectForm(['name','reason']);\n\n//creates form to accept task input\nfunction newTaskForm(fields){\n  let parent = taskForm;\n  elementCreator('submitTask','button',parent,'Save')\n  let submitTask = document.getElementById('submitTask');\n  submitTask.setAttribute('type','submit');\n    \n  elementCreator('Cancel', 'p', parent, 'Cancel','cancel');\n  createDropDown('project', (0,_index__WEBPACK_IMPORTED_MODULE_0__.projectNames)(_index__WEBPACK_IMPORTED_MODULE_0__.projectList), parent);\n  \n  for (let i = 0; i<fields.length; i++) {\n      let label = document.createElement('label');\n      label.setAttribute('for',fields[i]);\n      label.textContent = fields[i];\n      parent.appendChild(label);\n      let input = document.createElement('input');\n      //input.value = 'Example Value';\n      input.setAttribute('type', 'text');\n      input.setAttribute('name', fields[i]);\n      input.required = true;\n      parent.appendChild(input);\n  }\n  let dueDateLabel = document.createElement('label');\n  dueDateLabel.textContent = 'due date';\n  parent.appendChild(dueDateLabel);\n\n  elementCreator('dueDate','input', parent);\n  let dueDate = document.getElementById('dueDate');\n  dueDate.setAttribute('type','date');\n  dueDate.setAttribute('name','dueDate');\n  dueDate.required = true;\n}\nnewTaskForm(['name','description']);\n\n//function to edit task\nfunction editTaskForm(fields){\n  let parent = editTask;\n  elementCreator('submitTask','button',parent,'Save')\n  let submitTask = document.getElementById('submitTask');\n  submitTask.setAttribute('type','submit');\n    \n  elementCreator('Cancel', 'p', parent, 'Cancel','cancel');\n  createDropDown('project', (0,_index__WEBPACK_IMPORTED_MODULE_0__.projectNames)(_index__WEBPACK_IMPORTED_MODULE_0__.projectList), parent);\n  \n  for (let i = 0; i<fields.length; i++) {\n      let label = document.createElement('label');\n      label.setAttribute('for',fields[i]);\n      label.textContent = fields[i];\n      parent.appendChild(label);\n      let input = document.createElement('input');\n      //input.value = 'Example Value';\n      input.setAttribute('type', 'text');\n      input.setAttribute('name', fields[i]);\n      input.required = true;\n      parent.appendChild(input);\n  }\n  let dueDateLabel = document.createElement('label');\n  dueDateLabel.textContent = 'due date';\n  dueDateLabel.setAttribute('for','dueDate');\n  parent.appendChild(dueDateLabel);\n\n  let editDueDate = document.createElement('input');\n  editDueDate.setAttribute('type','text');\n  editDueDate.setAttribute('name','editDueDate');\n  editDueDate.required = true;\n  parent.appendChild(editDueDate);\n}\neditTaskForm(['name','description']);\n\n//function to create object and add to taskList\nfunction addToTaskList() {\n  console.log('submit triggers addtoTaskList');\n  let taskName = taskForm.querySelectorAll('[name=\"name\"]')[0].value.toLowerCase();\n  let taskDesc = taskForm.querySelectorAll('[name=\"description\"]')[0].value.toLowerCase();\n  let taskDue = taskForm.querySelectorAll('[name=\"dueDate\"]')[0].value.toLowerCase();\n  let taskProj = taskForm.querySelectorAll('[name=\"project\"]')[0].value.toLowerCase();\n\n  let newTask = (0,_index__WEBPACK_IMPORTED_MODULE_0__.taskFactory)(taskName, taskDesc, taskDue, 'incomplete', taskProj);\n  _index__WEBPACK_IMPORTED_MODULE_0__.taskList.push(newTask);\n  localStorage.setItem('taskList', JSON.stringify(_index__WEBPACK_IMPORTED_MODULE_0__.taskList));\n};\n\n//function to create object and add to projectList\nfunction addToProjectList() {\n    let projectName = projectForm.querySelectorAll('[name=\"name\"]')[0].value.toLowerCase();\n    let projectReason = projectForm.querySelectorAll('[name=\"reason\"]')[0].value.toLowerCase();\n    let projectPriority = projectForm.querySelectorAll('[name=\"project\"]')[0].value.toLowerCase();\n\n    if ((0,_index__WEBPACK_IMPORTED_MODULE_0__.isUnique)(projectName, (0,_index__WEBPACK_IMPORTED_MODULE_0__.projectNames)(_index__WEBPACK_IMPORTED_MODULE_0__.projectList))){\n        let newProject = (0,_index__WEBPACK_IMPORTED_MODULE_0__.projectFactory)(projectName, projectReason, projectPriority);\n        _index__WEBPACK_IMPORTED_MODULE_0__.projectList.push(newProject);\n        localStorage.setItem('projectList', JSON.stringify(_index__WEBPACK_IMPORTED_MODULE_0__.projectList));\n    } else {\n        console.log('ERROR: project name already added');\n    }\n  };\n\n//function to add task/project to DOM and display it\nfunction addTaskToDom(parent, array){\n  for (let i = 0; i < array.length; i++){\n    elementCreator(Object.values(array[i])[0],'div',parent,'',String(Object.values(array[i])[4]).replace(/\\s/g, ''));\n    let item = document.getElementById(Object.values(array[i])[0]);\n    for (let j = 0; j<4; j++){\n      elementCreator('','p', item, Object.values(array[i])[j],Object.keys(array[i])[j]);\n    }\n    elementCreator('','p',item,'remove','remove');\n    elementCreator('','p',item,'edit','edit');\n    item.classList.add('hidden');\n  }\n}\n\nfunction addProjectToDom(parent, array){\n  for (let i = 0; i < array.length; i++){\n    console.log(`class: ${String(Object.values(array[i])[3]).replace(/\\s/g)}`);\n    elementCreator(Object.values(array[i])[0],'div', parent,Object.values(array[i])[0],'project');\n    let projDOM = document.getElementById(Object.values(array[i])[0]);\n    elementCreator('','p',projDOM,'remove','remove');\n  }\n}\nlet taskIndex;\n\n//finds index of task in taskList.\nfunction getListIndex(taskName,taskProject){\n  for (let i = 0; i<_index__WEBPACK_IMPORTED_MODULE_0__.taskList.length; i++){\n    if (_index__WEBPACK_IMPORTED_MODULE_0__.taskList[i].name === taskName){\n      if(String(_index__WEBPACK_IMPORTED_MODULE_0__.taskList[i].project.replace(/\\s/g, '')) === taskProject){\n        taskIndex = i;\n      };\n    };\n  }\n}\n\naddTaskToDom(taskDisplay, _index__WEBPACK_IMPORTED_MODULE_0__.taskList);\naddProjectToDom(projectDisplay, _index__WEBPACK_IMPORTED_MODULE_0__.projectList);\n\n//Event listeners\nnavbar.addEventListener('click', function(event) {\n\tlet clicked = event.target;\n  if (clicked.id === \"addToTaskList\"){\n    taskForm.classList.toggle('hidden');\n  } else if (clicked.id === 'addToProjectList'){\n    projectForm.classList.toggle('hidden');\n  }\n});\n\ntaskForm.addEventListener('submit', addToTaskList);\ntaskForm.addEventListener('click', function(event){\n  let clicked = event.target;\n  if (clicked.textContent === 'Cancel'){\n    taskForm.classList.toggle('hidden');\n  }\n})\n\nprojectForm.addEventListener('submit', addToProjectList);\nprojectForm.addEventListener('click', function(event){\n  let clicked = event.target;\n  if (clicked.textContent === 'Cancel'){\n    projectForm.classList.toggle('hidden');\n  }\n})\ntaskDisplay.addEventListener('click', function(event){\n  let clicked = event.target;\n  if (clicked.textContent === 'remove'){\n    removeElement(clicked, _index__WEBPACK_IMPORTED_MODULE_0__.taskList, 'taskList');\n  } else if (clicked.textContent === 'incomplete' || clicked.textContent === 'complete'){\n    completeTask(clicked, _index__WEBPACK_IMPORTED_MODULE_0__.taskList, 'taskList');\n  } else if (clicked.textContent === 'edit'){\n    console.log(clicked.parentNode.id);\n    editTask.classList.remove('hidden');\n    let taskName = clicked.parentNode.id;\n    //will this next line work?\n    let taskProject = clicked.parentNode.className;\n    getListIndex(taskName, taskProject);\n\n    let eForm = document.getElementById('editTask');\n    let eTaskName = editTask.querySelectorAll('[name=\"name\"]')[0];\n    let eTaskDesc = editTask.querySelectorAll('[name=\"description\"]')[0];\n    let eTaskDue = editTask.querySelectorAll('[name=\"editDueDate\"]')[0];\n    console.log('eTaskDue: '+eTaskDue);\n    let eTaskProj = editTask.querySelectorAll('[name=\"project\"]')[0];\n\n    eTaskName.value = _index__WEBPACK_IMPORTED_MODULE_0__.taskList[taskIndex].name;\n    eTaskDesc.value = _index__WEBPACK_IMPORTED_MODULE_0__.taskList[taskIndex].description;\n    eTaskDue.value = _index__WEBPACK_IMPORTED_MODULE_0__.taskList[taskIndex].dueDate;\n    eTaskProj.value = _index__WEBPACK_IMPORTED_MODULE_0__.taskList[taskIndex].project;\n}\n})\n\nfunction editTaskList() {\n  console.log('event listener triggered!');\n  let taskName = editTask.querySelectorAll('[name=\"name\"]')[0].value.toLowerCase();\n  let taskDesc = editTask.querySelectorAll('[name=\"description\"]')[0].value.toLowerCase();\n  let taskDue = editTask.querySelectorAll('[name=\"editDueDate\"]')[0].value.toLowerCase();\n  let taskProj = editTask.querySelectorAll('[name=\"project\"]')[0].value.toLowerCase();\n\n  let newTask = (0,_index__WEBPACK_IMPORTED_MODULE_0__.taskFactory)(taskName, taskDesc, taskDue, 'incomplete', taskProj);\n  console.log(`taskIndex\" ${taskIndex}`);\n  console.log(`new Task: ${newTask}`);\n  _index__WEBPACK_IMPORTED_MODULE_0__.taskList.splice(taskIndex,1,newTask);\n  localStorage.setItem('taskList', JSON.stringify(_index__WEBPACK_IMPORTED_MODULE_0__.taskList));\n};\n\neditTask.addEventListener('submit', editTaskList);\neditTask.addEventListener('click', function(event){\n  let clicked = event.target;\n  if (clicked.textContent === 'Cancel'){\n    editTask.classList.toggle('hidden');\n  }\n})\n\nprojectDisplay.addEventListener('click', function(event) {\n\tlet clicked = event.target;\n      //define project DOM items and task DOM items\n      let allProjects = projectDisplay.children;\n      let allTasks = taskDisplay.children;\n  \n  if (clicked.textContent === 'remove'){\n    //delete project in array and DOM\n    removeElement(clicked, _index__WEBPACK_IMPORTED_MODULE_0__.projectList, 'projectList');\n    } else if (clicked.id !== 'projectDisplay') {\n      //this conditional should highlight the project clicked and\n      //display its tasks (and only its tasks). \n      \n      \n\n      //hides/makes inactive ALL project and task DOM items\n      Array.from(allTasks).forEach(function(element){\n        element.classList.add('hidden');\n      });\n      Array.from(allProjects).forEach(function(element){\n        element.classList.remove('active');\n      });\n      let clickedId = clicked.id;\n      console.log(clicked.id);\n\n      let projectClicked = document.getElementById(clicked.id);\n      projectClicked.classList.add('active');\n\n    //select and display tasks in DOM to display based on the project name of clicked\n    let projectClass = String(clicked.id.replace(/\\s/g, '').toLowerCase());\n    let tasksToDisplay = document.getElementsByClassName(projectClass);\n    Array.from(tasksToDisplay).forEach(function (element) {\n      element.classList.toggle('hidden');\n    });\n    }\n  });\n\n\n\n\n\n\n//# sourceURL=webpack://todo/./src/DOM.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isUnique\": () => (/* binding */ isUnique),\n/* harmony export */   \"projectFactory\": () => (/* binding */ projectFactory),\n/* harmony export */   \"taskFactory\": () => (/* binding */ taskFactory),\n/* harmony export */   \"checkStorage\": () => (/* binding */ checkStorage),\n/* harmony export */   \"taskList\": () => (/* binding */ taskList),\n/* harmony export */   \"completedTasks\": () => (/* binding */ completedTasks),\n/* harmony export */   \"projectList\": () => (/* binding */ projectList),\n/* harmony export */   \"priorities\": () => (/* binding */ priorities),\n/* harmony export */   \"projectSelect\": () => (/* binding */ projectSelect),\n/* harmony export */   \"projectNames\": () => (/* binding */ projectNames)\n/* harmony export */ });\nlet projectList = [{name: 'Just do it', why: 'get it done', priority:'low'}];\nlet taskList = [];\nlet completedTasks = [];\nlet priorities = ['high','medium','low'];\n\nfunction isUnique(value, body){\n  let lowerValue = value.toLowerCase();\n  let x = 0;\n  for (let i = 0; i < body.length; i++){\n    if (lowerValue === body[i].toLowerCase()){\n      x+=1\n    }\n    console.log(x);\n  }\n  if (x>0){\n    return false;\n  } else {\n    return true;\n  }\n}\n  \nfunction projectFactory(name, why, priority){\n  return {name, why, priority};\n};\n\nfunction taskFactory(name, description, dueDate, status, project){\n  return {name, description, dueDate, status, project};\n};\n\n//Checks storage for data from previous sessions, makes it available in arrays.\nconst projectStorage = JSON.parse(localStorage.getItem('projectList'));\nif (projectStorage !== null){\nprojectList = projectStorage;\n};\n\nconst taskStorage = JSON.parse(localStorage.getItem('taskList'));\nif (taskStorage !== null){\ntaskList = taskStorage;\n};\n\nfunction checkStorage (array, storage){\n  JSON.parse(localstorage.getItem('${array}'));\n  if (storage !== null){\n    array = storage;\n  }\n};\n\n//create list of project names\nfunction projectNames (array) {\n  let nameArray = [];\n  array.forEach( element => {\n    nameArray.push(element.name)\n  })\n  return nameArray;\n}\n\nfunction projectSelect (array, value) {\n  let targetArray = [];\n  value = value.toLowerCase();\n  array.forEach (element => {\n    if (element.project === value) {\n      targetArray.push(element);\n    };\n  });\n  return targetArray;\n};\n\n\n\n//# sourceURL=webpack://todo/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/DOM.js");
/******/ 	
/******/ })()
;